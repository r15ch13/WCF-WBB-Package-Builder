<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * @author Richard Kuhnt
 * @license MIT License (http://r15ch13.mit-license.org/)
 */
-->
<project name="WCF/WBB Package Builder" default="help" basedir=".">
	<property file="default.properties" />
	<property name="build.dir" value="dist" />
	<property name="build.source" value="src" />
	<property name="build.compress" value="true" />
	<property name="package.xml" value="${build.source}/package.xml" />
	<property name="script.version" value="2.0.0" />

	<target name="help" description="Displays the available options">
		<echo msg="${phing.project.name} ${script.version}" />
		<echo msg="------------------" />
		<echo msg="Build options" />
		<echo msg="------------------" />
		<echo msg="$ phing prepare - Creates new build directory" />
		<echo msg="$ phing init - Creates basic package structure (languages, tar, xml) and package.xml" />
		<echo msg="$ phing update-date - Updates the package creation date" />
		<echo msg="$ phing update-version - Updates the package version" />
		<echo msg="$ phing build - Create new package" />
		<echo msg="$ phing help - Displays the available options" />
		<echo msg="------------------" />
		<echo msg="Package structure:" />
		<echo msg="Projectfolder" />
		<echo msg="|-- dist                    # The build package will be saved here ([packagename]_v[version].tar[.gz])" />
		<echo msg="|-- src" />
		<echo msg="|   |-- languages           # Language-Files (*.xml)" />
		<echo msg="|   |-- optionals           # optional Packages (*.tar | *.tar.gz)" />
		<echo msg="|   |-- requirements        # required Packages (*.tar | *.tar.gz)" />
		<echo msg="|   |-- sql                 # SQL-Files (*.sql)" />
		<echo msg="|   |   |-- install.sql" />
		<echo msg="|   |   `-- update.sql" />
		<echo msg="|   |-- tar                 # All subfolders will be packed to [foldername].tar" />
		<echo msg="|   |   |-- acptemplates" />
		<echo msg="|   |   |-- files" />
		<echo msg="|   |   |-- templates" />
		<echo msg="|   |   `-- pip" />
		<echo msg="|   |-- xml                 # Other XML-Files (*.xml)" />
		<echo msg="|   `-- package.xml         # Plugin package.xml" />
		<echo msg="`-- build.xml" />
	</target>

	<target name="test" depends="load-package-data">
		<echo msg="${phing.project.name} ${script.version}" />
		<echo msg="${package.version}" />
		<echo msg="${package.name}" />
	</target>

	<target name="init" description="Create basic package folder structure">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.source}" />
		<mkdir dir="${build.source}/languages" />
		<mkdir dir="${build.source}/tar" />
		<mkdir dir="${build.source}/tar/files" />
		<mkdir dir="${build.source}/tar/templates" />
		<mkdir dir="${build.source}/xml" />

		<available file="${package.xml}" property="package.exists" value="1" />
		<if>
			<equals arg1="${package.exists}" arg2="1" />
			<then>
				<echo msg="package.xml already exists" />
			</then>
			<else>
				<echo msg="Creating template package.xml" />
				<input propertyname="init.name" defaultvalue="com.example.packagename">Enter package name</input>
				<php expression="chr(10)" returnProperty="LF" />
				<php expression="chr(9)" returnProperty="TAB" />
				<echo file="${package.xml}" append="false">${package.template}</echo>
				<replaceregexp file="${package.xml}" match="\\n" replace="${LF}" />
				<replaceregexp file="${package.xml}" match="\\t" replace="${TAB}" />
				<replaceregexp file="${package.xml}" match="(com.example.packagename)" replace="${init.name}" />
				<phingcall target="update-version" />
				<phingcall target="update-date" />
			</else>
		</if>
	</target>

	<target name="prepare" depends="load-package-data" description="Creates new build directory and creates tar archives">
		<echo msg="Preparing build directory ..." />
		<mkdir dir="${build.dir}" />

		<echo msg="Creating *.tar archives ..." />
		<foreach param="foldername" absparam="absfoldername" target="buildtars">
			<fileset dir="." defaultexcludes="true">
				<exclude name="${build.source}/tar/*.tar"/>
				<include name="${build.source}/tar/*"/>
			</fileset>
		</foreach>
	</target>

	<target name="buildtars" description="Creates tar archives for each firstlevel subdirectory">
		<available file="${foldername}" property="folder.exists" value="1" />
		<if>
			<equals arg1="${folder.exists}" arg2="1" />
			<then>
				<tar destfile="${foldername}.tar" compression="none">
					<fileset dir="${foldername}" defaultexcludes="true">
					</fileset>
				</tar>
			</then>
			<else>
				<echo msg="${foldername} not found." />
			</else>
		</if>
	</target>

	<target name="cleanup" description="Deletes previous build tar files">
		<delete>
			<fileset dir="." defaultexcludes="true">
				<include name="${build.source}/tar/*.tar" />
			</fileset>
		</delete>
	</target>

	<target name="build" depends="load-package-data">
		<available file="${build.dir}/${package.name}_v${package.version}.tar.gz" property="file.exists" value="1" />
		<available file="${build.dir}/${package.name}_v${package.version}.tar" property="file.exists" value="1" />
		<if>
			<equals arg1="${file.exists}" arg2="1" />
			<then>
				<echo msg="Package with version ${package.version} already exists!" />
				<input propertyname="package.override" validargs="yes,no" defaultvalue="no">Do you want to override it? </input>
				<if>
					<equals arg1="${package.override}" arg2="yes" />
					<then>
						<delete file="${build.dir}/${package.name}_v${package.version}.tar.gz" />
						<delete file="${build.dir}/${package.name}_v${package.version}.tar" />
						<phingcall target="realbuild" />
					</then>
				</if>
			</then>
			<else>
				<phingcall target="realbuild" />
			</else>
		</if>
	</target>

	<target name="realbuild" depends="load-package-data, update-date, cleanup, prepare">
		<echo msg="${phing.project.name} ${script.version}" />
		<echo msg="Building ${package.name} ..." />

		<fileset dir="${build.source}" id="package" defaultexcludes="true">
			<include name="languages/*.xml" />
			<include name="optionals/*.tar" />
			<include name="optionals/*.tar.gz" />
			<include name="requirements/*.tar" />
			<include name="requirements/*.tar.gz" />
			<include name="sql/*" />
			<include name="tar/*.tar" />
			<include name="xml/*" />
			<include name="package.xml" />
		</fileset>
		<if>
			<equals arg1="${build.compress}" arg2="1" />
			<then>
				<echo msg="creating compressed package" />
				<tar destfile="${build.dir}/${package.name}_v${package.version}.tar.gz" compression="gzip">
					<fileset refid="package" />
				</tar>
			</then>
			<else>
				<echo msg="creating uncompressed package" />
				<tar destfile="${build.dir}/${package.name}_v${package.version}.tar" compression="none">
					<fileset refid="package" />
				</tar>
			</else>
		</if>
	</target>

	<!-- Loads package version and name from package.xml and saves them to package.version and package.name properties -->
	<target name="load-package-data" description="Loads package version and name from package.xml and saves them to package.version and package.name properties">
		<loadfile property="package.content" file="${package.xml}" />
		<propertyregex property="package.version" subject="${package.content}" pattern="${pattern.version}" match="$1" casesensitive="false" defaultvalue="0.0.1" />
		<propertyregex property="package.name" subject="${package.content}" pattern="${pattern.name}" match="$1" casesensitive="false" defaultvalue="CHANGEME" />
		<echo msg="Extracted Version: ${package.version}" />
		<echo msg="Extracted Packagename: ${package.name}" />
	</target>

	<target name="update-date" description="Updating the package creation date">
		<tstamp>
			<format property="date" pattern="%Y-%m-%d" />
		</tstamp>
		<replaceregexp file="${package.xml}" match="${pattern.date}" replace="&lt;date&gt;${date}&lt;/date&gt;" byline="true" />
	</target>

	<target name="update-version" depends="load-package-data" description="Updating the package version">
		<input propertyname="package.newversion" defaultvalue="${package.version}">Enter package version</input>
		<if>
			<equals arg1="${package.newversion}" arg2="${package.version}" />
			<then>
				<echo msg="Version has not been changed." />
			</then>
			<else>
				<echo msg="Changing version from v${package.version} to v${package.newversion}." />
				<replaceregexp file="${package.xml}" match="${pattern.version}" replace="&lt;version&gt;${package.newversion}&lt;/version&gt;" byline="true" />
			</else>
		</if>
	</target>
</project>